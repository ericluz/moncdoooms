@{
    Layout = "~/_AdminLayout.cshtml";
    Page.Title = "User Management / Update Account";

    // Initialize general page variables
    var fullname = "";
    var email = "";
    var password = "";
    DateTime birthdate;

    // Setup validation
    Validation.RequireField("fullname", "Providing a name is not hard as that.");
    Validation.RequireField("email", "Email is required to this user to signin.");
    Validation.RequireField("password", "Please provide a password for this account.");
    Validation.RequireField("birthdate", "When this human born?");
    Validation.Add("password",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    var UserId  = UrlData[0];

    if (UserId.IsEmpty()) {
         Response.Redirect("~/Admin/UserManagement");
    }

    // Open database connection
    var db = Database.Open("monco");

    if (IsPost && Validation.IsValid()) {
        AntiForgery.Validate();

        // Assign for data into variables
        fullname = Request.Form["fullname"];
        email = Request.Form["email"];
        password = Request.Form["password"];
        birthdate = Convert.ToDateTime(Request.Form["birthdate"]);

        string hashPassword = Crypto.HashPassword(password);

        // Update info on UserProfile table
        var updateQueryString = "UPDATE UserProfile SET Email=@0, FirstName=@1, BirthDate=@2 WHERE UserId=@3" ;
        int cntUpdateUserBasicInfo = db.Execute(updateQueryString, email, fullname, birthdate, UserId);
        var updateQueryPassword = "UPDATE webpages_Membership SET Password=@0 WHERE UserId=@1";
        int cntUpdateUserPassword = db.Execute(updateQueryPassword, hashPassword, UserId);
        
        if (cntUpdateUserBasicInfo != 1 && cntUpdateUserPassword != 1) {
            ModelState.AddFormError("We have encountered a problem while updating this user's info not all changes have been made.");
        } else {
            Response.Redirect("~/Admin/UserManagement");    
        }
        
    }
    else {
        var selectQuery_UserInfo = "SELECT * FROM UserProfile WHERE UserId=@0";
        var extendedQuery_UserInfo = "SELECT * FROM webpages_Membership WHERE UserId=@0";
        var row = db.QuerySingle(selectQuery_UserInfo, UserId);
        var row_ext = db.QuerySingle(extendedQuery_UserInfo, UserId);

        fullname = row.FirstName;
        email = row.Email;
        birthdate = Convert.ToDateTime(row.BirthDate);
        password = row_ext.Password;
    }

}

<div class="row">
    <div class="col-lg-12">
        <h1 class="page-header"><i class="fa fa-user"></i>&nbsp;@Page.Title</h1>
    </div>
    <!-- /.col-lg-12 -->
</div>
<!-- /.row -->

<div class="row">
    <div class="col-lg-12">
    @* If at least one validation error exists, notify the user *@
    @Html.ValidationSummary("Account creation was unsuccessful. Please correct the errors and try again.", excludeFieldErrors: true, htmlAttributes: null)
    </div>
</div>

<div class="row">
    <div class="col-lg-12">
        <div class="panel panel-default">
            <div class="panel-heading">
                <a href="~/Admin/UserManagement"><i class="fa fa-arrow-left"></i>&nbsp; Return</a> /
                Update User Form
            </div>
            <!-- /.panel-heading -->
            
            <div class="panel-body">
                <form id="update-user-form" class="form-horizontal" role="form" method="POST">
                @AntiForgery.GetHtml()
                    <div class="form-group">
                        <label class="col-sm-2 control-label">Full Name:</label>
                        <div class="col-sm-10">
                            <input type="text" class="form-control" name="fullname" value="@fullname" required />
                            @Html.ValidationMessage("fullname")
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">Birthdate:</label>
                        <div class="col-sm-10">
                        <input type="date" class="form-control" name="birthdate" value="@{ @birthdate.ToString("yyyy-MM-dd") if(birthdate.ToString("yyyy-MM-dd") == "0001-01-01") { <text>YYYY-MM-DD</text> } }" required />
                            @Html.ValidationMessage("birthdate")
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">Email:</label>
                        <div class="col-sm-10">
                        <input type="email" class="form-control" name="email" value="@email" required />
                            @Html.ValidationMessage("email")
                        </div>
                    </div>

                    <div class="form-group">
                        <label class="col-sm-2 control-label">New Password:</label>
                        <div class="col-sm-10">
                        <input type="password" class="form-control" name="password" required />
                            @Html.ValidationMessage("password")
                        </div>
                    </div>
                </form>
            </div>
            <!-- /.panel-body -->

            <div class="panel-footer">
                <div class="text-right">
                    <button type="submit" class="btn btn-primary" form="update-user-form">Save Changes</button>
                </div>
            </div>
        </div>
        <!-- /.panel -->
    </div>
    <!-- /.col-lg-12 -->
</div>
<!-- /.row -->