@* Remove this section if you are using bundling *@
@section Scripts {
    <script src="~/Scripts/jquery.validate.min.js"></script>
    <script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
}

@{
    Layout = "~/_SiteLayout.cshtml";
    Page.Title = "Account Registration";

    string email = "";
    string password = "";
    string loginData = "";
    string providerDisplayName = "";

    var returnUrl = Request.QueryString["ReturnUrl"];
    if (returnUrl.IsEmpty()) {
        // Some external login providers always require a return URL value
        returnUrl = Href("~/");
    }

    // Setup validation
    Validation.RequireField("email", "The email address field is required.");
    Validation.RequireField("newPassword", "The password field is required.");
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "Password must be at least 6 characters"));

    if (IsPost && Request.Form["newAccount"].AsBool()) {
        // Handle new account registration form
        AntiForgery.Validate();
        email = Request.Form["email"];
        password = Request.Form["newPassword"];
        loginData = Request.Form["loginData"];

        string provider = "";
        string providerUserId = "";
        if (WebSecurity.IsAuthenticated || !OAuthWebSecurity.TryDeserializeProviderUserId(loginData, out provider, out providerUserId)) {
            Response.Redirect("~/Account/Manage");
            return;
        }

        providerDisplayName = OAuthWebSecurity.GetOAuthClientData(provider).DisplayName;

        if (Validation.IsValid()) {
            // Insert a new user into the database
            var db = Database.Open("tierone");

            // Check if user already exists
            var user = db.QuerySingle("SELECT Email FROM UserProfile WHERE LOWER(Email) = LOWER(@0)", email);

            if (user == null) {
                // Insert email into the profile table
                db.Execute("INSERT INTO UserProfile (Email) VALUES (@0)", email);

                OAuthWebSecurity.CreateOrUpdateAccount(provider, providerUserId, email); // Insert user data into webpages_OAuthMembership

                bool requireConfirmation = false;
                WebSecurity.CreateAccount(email, password, requireConfirmation); // Insert user data into webpages_Membership

                OAuthWebSecurity.Login(provider, providerUserId, createPersistentCookie: false); // Login User

                Context.RedirectLocal(returnUrl);
                return;
            } else {
                ModelState.AddError("email", "*This email is already taken. If you are the owner of this account please login through normal method.");
            }
        }
    } else {
        // Handle callbacks from the external login provider
        var result = OAuthWebSecurity.VerifyAuthentication(Href("~/Account/RegisterService", new { returnUrl }));

        if (result.IsSuccessful) { // Redirect is already a user
            bool registered = OAuthWebSecurity.Login(result.Provider, result.ProviderUserId, createPersistentCookie: false);
            if (registered) {
                Context.RedirectLocal(returnUrl);
                return;
            }

            if (WebSecurity.IsAuthenticated) {
                // If the current user is logged in add the new account
                OAuthWebSecurity.CreateOrUpdateAccount(result.Provider, result.ProviderUserId, WebSecurity.CurrentUserName);
                Context.RedirectLocal(returnUrl);
                return;
            } else { // Set variable for new user integration
                // User is new, set default user name to the value obtained from external login provider
                email = result.UserName;
                loginData = OAuthWebSecurity.SerializeProviderUserId(result.Provider, result.ProviderUserId);
                providerDisplayName = OAuthWebSecurity.GetOAuthClientData(result.Provider).DisplayName;
            }
        } else {
            Response.Redirect("~/Account/ExternalLoginFailure");
            return;
        }
    }
}
 
<hgroup class="title">
    <h1>@Page.Title</h1>
</hgroup>

<div class="row">

    <div class="col-md-7">
    <form class="form-horizontal" method="POST" role="form">
        @AntiForgery.GetHtml()
        <input type="hidden" name="loginData" value="@loginData" />
        @* If at least one validation error exists, notify the user *@
        @Html.ValidationSummary(excludeFieldErrors: true)

        <fieldset>
            <legend>Associate your @providerDisplayName account</legend>
            <p class="text-success">
                <i class="fa fa-flag fa-lg"></i>&nbsp;
                You've successfully authenticated with <strong>@providerDisplayName</strong>. Now enter a Password for your acccount.
            </p>
            <div class="form-group">
                    <label for="email" class="col-sm-4">Email address</label>
                    <div class="col-sm-8">
                    <input type="hidden" name="email" value="@email" required />
                    <p class="form-control-static">@email</p>
                        <small class="text-danger">@Html.ValidationMessage("email")</small>
                    </div>
            </div>

            <div class="form-group">
                    <label for="email" class="col-sm-4">Set Password</label>
                    <div class="col-sm-8">
                    <input type="password" class="form-control" id="email" name="newPassword" value="" @Validation.For("newPassword") required />
                    @* Write any email validation errors to the page *@
                    @Html.ValidationMessage("newPassword")
                    </div>
            </div>

            <div class="form-group">
                    <label class="col-sm-4"></label>
                    <div class="col-sm-8">
                    <button type="submit" class="btn btn-success btn-lg" name="newAccount" value="true">Continue</button>
                    </div>
            </div>
        </fieldset>
    </form>
    </div>

    <div class="col-md-*"></div>

</div><!-- end of /.row -->